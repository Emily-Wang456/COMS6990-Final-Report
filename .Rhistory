unique.genders <- dat[, unique(gender)]
unique.income.groups <- dat[, unique(income.group)]
unique.regions <- dat[, unique(region)]
unique.personas <- dat[, unique(persona)]
unique.products <- dat[, unique(Product)]
num.products <- length(unique.products)
respondent.variables <- c("age.group", "gender", "income.group", "region", "persona")
states.of.engagement <- c("Awareness", "Consideration", "Consumption", "Satisfaction", "Advocacy")
bp.traits <- names(dat)[grep(pattern = "BP_", x = names(dat))]
# Chunk 4: functions
percentage.table <- function(x, digits = 1){
tab <- table(x)
percentage.tab <- 100*tab/(sum(tab))
rounded.tab <- round(x = percentage.tab, digits = digits)
return(rounded.tab)
}
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
# Chunk 5: respondents
inputPanel(
selectInput(inputId = "respondent_variable", label = "Select Variable:", choices = respondent.variables, selected = respondent.variables[1]), checkboxInput(inputId = "respondent_show_percentages", label = "Show Percentages", value = TRUE)
)
renderPlot({
tab <- percentage.table(x = dat[, get(input$respondent_variable)])
barplot(height = tab, space = 0.01, las = 1, main = input$respondent_variable, ylab = "Percentage", xlab = input$respondent_variable, ylim = c(0, 1.2*max(tab, na.rm = TRUE)))
if(input$respondent_show_percentages == TRUE){
space_val = 0
text(x = -0.4 + 1:length(tab) * (1 + space_val), y = tab, labels = sprintf("%.1f%%", tab), pos = 3)
}
})
# Chunk 6: products
inputPanel(
selectInput(inputId = "product_info_engagement_state", label = "Select State of Engagement:", choices = states.of.engagement, selected = states.of.engagement[1]),
selectInput(inputId = "product_info_age_group", label = "Age", choices = unique.age.groups, selected = unique.age.groups, multiple = TRUE),
selectInput(inputId = "product_info_gender_group", label = "Gender", choices = unique.genders, selected = unique.genders, multiple = TRUE),
selectInput(inputId = "product_info_income_group", label = "Income", choices = unique.income.groups, selected = unique.income.groups, multiple = TRUE),
selectInput(inputId = "product_info_region_group", label = "Region", choices = unique.regions, selected = unique.regions, multiple = TRUE),
selectInput(inputId = "product_info_persona_group", label = "Persona", choices = unique.personas, selected = unique.personas, multiple = TRUE),
checkboxInput(inputId = "product_info_decreasing", label = "Sorted", value = TRUE),
checkboxInput(inputId = "product_info_show_percentages", label = "Show Percentages", value = TRUE),
selectInput(inputId = "product_info_top", label = "Show Top Product", choices = c(5, 10, 15, 20), selected = 5),
sliderInput(inputId = "product_info_names_magnification", label = "Magnify Product Names", min = 0.4, max = 1.4, value = 1, step = 0.1)
)
renderPlot({
subdat <- dat[age.group %in% input$product_info_age_group & gender %in% input$product_info_gender_group & income.group %in% input$product_info_income_group & region %in% input$product_info_region_group & persona %in% input$product_info_persona_group]
switch(input$product_info_engagement_state,
rates <- subdat[, .(Mean = 100 * mean(get(input$product_info_engagement_state), na.rm = TRUE)/max(get(input$product_info_engagement_state), na.rm = TRUE)), by = Product]
)
if(input$product_info_decreasing == TRUE){
setorderv(x = rates, cols = "Mean", order = -1)
}
barplot(height = rates[1: input$product_info_top, Mean], names.arg = rates[1: input$product_info_top, Product], space = 0.01, las = 1, main = input$product_info_engagement_state, ylab = sprintf("Rate of %s", input$product_info_engagement_state), cex.names = input$product_info_names_magnification, ylim = c(-100, 120), xaxt = "n", axes = F)
axis(side = 2, at = 20*(0:5), las = 2)
text(x = -0.5 + 1.02*1:rates[1: input$product_info_top, .N], y = -15, labels = rates[1: input$product_info_top, Product], srt = 45, cex = input$product_info_names_magnification, pos = 2)
if(input$product_info_show_percentages == TRUE){
space_val = 0
text(x = -0.4 + 1:rates[1: input$product_info_top, .N] * (1 + space_val), y = rates[1: input$product_info_top, Mean], labels = sprintf("%.1f%%", rates[1: input$product_info_top, Mean]), pos = 3)
}
})
# Chunk 7: brand_perceptions
inputPanel(
selectInput(inputId = "product_info_age", label = "Age", choices = unique.age.groups, selected = unique.age.groups, multiple = TRUE),
selectInput(inputId = "product_info_gender", label = "Gender", choices = unique.genders, selected = unique.genders, multiple = TRUE),
selectInput(inputId = "product_info_income", label = "Income", choices = unique.income.groups, selected = unique.income.groups, multiple = TRUE),
selectInput(inputId = "product_info_region", label = "Region", choices = unique.regions, selected = unique.regions, multiple = TRUE),
selectInput(inputId = "product_info_persona", label = "Persona", choices = unique.personas, selected = unique.personas, multiple = TRUE),
#checkboxInput(inputId = "product_decreasing", label = "Sorted", value = TRUE),
selectInput(inputId = "product_info", label = "Show Top Product", choices = c(5, 10, 15, 20), selected = 5),
sliderInput(inputId = "product_info_magnification", label = "Magnify Product Names", min = 0.4, max = 1.4, value = 1, step = 0.1)
)
# active.dataset <- reactive({
#   dat[age.group %in% input$product_info_age_group & gender %in% input$product_info_gender_group & income.group %in% input$product_info_income_group & region %in% input$product_info_region_group & persona %in% input$product_info_persona_group]
# })
renderPlot({
subdatset <- dat[age.group %in% input$product_info_age & gender %in% input$product_info_gender & income.group %in% input$product_info_income & region %in% input$product_info_region & persona %in% input$product_info_persona]
avg <-subdatset[, lapply(X = .SD, FUN = "mean", na.rm = TRUE), .SDcols = bp.traits, by = Product]
# invert the negative perceptions
invert.score <- avg[, lapply(X = .SD, function(x) 10 - x), .SDcols = tail(bp.traits, 4)]
# replace the old values with inverted score
avg[, tail(bp.traits, 4)] <- invert.score
overall.avg.perception <- avg[, .(Overall_Perception = rowSums(.SD, na.rm = TRUE)/length(bp.traits)), by = "Product"]
#setorderv(x = overall.avg.perception, cols = "Overall_Perception", order = -1)
displayed.perception <- overall.avg.perception[1:input$product_info]
# barplot(height = overall.avg.perception[1: input$product_info, Overall_Perception], names.arg = overall.avg.perception[1: input$product_info, Product],space = 0.01, las = 1, main = "Top Percetion Bands", ylab = sprintf("Rate of %s", "Bands"), cex.names = input$product_info_magnification, ylim = c(-80, 16), xaxt = "n", axes = F)
# axis(side = 2, at = 20*(0:5), las = 2)
#
# text(x = -0.5 + 1.02*1:overall.avg.perception[1: input$product_info, .N], y = -15, labels = overall.avg.perception[1: input$product_info, Product], srt = 45, cex = input$product_info_magnification, pos = 2)
#
# # if(input$product_info_show_percentages == TRUE){
# space_val = 0
# text(x = -0.4 + 1:overall.avg.perception[1: input$product_info, .N] * (1 + space_val), y = overall.avg.perception[1: input$product_info, Overall_Perception], labels = sprintf("%.1f", overall.avg.perception[1: input$product_info, Overall_Perception]), pos = 3)
# # }
displayed.perception$Product <- factor(displayed.perception$Product, levels = displayed.perception$Product[order(displayed.perception$Overall_Perception, decreasing = TRUE)])
ggplot(displayed.perception, aes(x = Product, y = Overall_Perception)) +
geom_bar(stat = "identity") +
ggtitle(sprintf("Top %s Overall Brand Perception", input$product_info)) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(aes(label = sprintf("%.1f", Overall_Perception )), vjust = -.5)
})
# Chunk 8: engagement_plots
inputPanel(
selectInput(inputId = "first_outcome", label = "Select First State of Engagement:", choices = states.of.engagement, selected = states.of.engagement[1]),
selectInput(inputId = "second_outcome", label = "Select Second State of Engagement:", choices = states.of.engagement, selected = states.of.engagement[2]),
checkboxInput(inputId = "product_show_percentages", label = "Show Percentages", value = TRUE),
selectInput(inputId = "product_top", label = "Show Top Product", choices = c(5, 10, 15, 20), selected = 5)
)
renderPlot({
dat$Satisfaction <- dat$Satisfaction / 10
first.outcome <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = input$first_outcome, keyby = Product]
second.outcome <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = input$second_outcome, keyby = Product]
product <- sort(unique(dat$Product))
cal.diff <- first.outcome[, get(input$first_outcome)] - second.outcome[, get(input$second_outcome)]
diff.table <- data.table(product, cal.diff)
colnames(diff.table) <- c("product", "cal.diff")
setorderv(x = diff.table, cols = "cal.diff", order = -1)
displayed.diff.gap <- diff.table[1:input$product_top]
displayed.diff.gap$product <- factor(displayed.diff.gap$product, levels = displayed.diff.gap$product[order(displayed.diff.gap$cal.diff, decreasing = TRUE)])
if(input$product_show_percentages == TRUE){
ggplot(displayed.diff.gap, aes(x = product, y = cal.diff)) +
geom_bar(stat = "identity") +
ggtitle(sprintf("Top %s Outcomes Gaps", input$product_top)) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(aes(label = sprintf("%.1f%%", cal.diff*100 ), vjust = ifelse(cal.diff >=0, -.5, 1.5)))
} else {
ggplot(displayed.diff.gap, aes(x = product, y = cal.diff)) +
ggtitle(sprintf("Top %s Outcomes Gaps", input$product_top)) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_bar(stat = "identity")
}
})
# Chunk 9: engagement_models
inputPanel(
selectInput(inputId = "em_product", label = "Product", choices = unique.products, selected = unique.products[1]),
selectInput(inputId = "em_state", label = "State of Engagement:", choices = states.of.engagement, selected = states.of.engagement[1]),
selectInput(inputId = "em_age", label = "Age", choices = unique.age.groups, selected = unique.age.groups, multiple = TRUE),
selectInput(inputId = "em_gender", label = "Gender", choices = unique.genders, selected = unique.genders, multiple = TRUE),
selectInput(inputId = "em_income", label = "Income", choices = unique.income.groups, selected = unique.income.groups, multiple = TRUE),
selectInput(inputId = "em_region", label = "Region", choices = unique.regions, selected = unique.regions, multiple = TRUE),
selectInput(inputId = "em_persona", label = "Persona", choices = unique.personas, selected = unique.personas, multiple = TRUE),
selectInput(inputId = "em_bp", label = "Brand Perceptions", choices = bp.traits, selected = bp.traits, multiple = TRUE),
checkboxInput(inputId = "agg.eng", label = "Aggregated Engagement", value = TRUE)
)
library(data.table)
reduce.formula <- function(dat, the.initial.formula) {
dat <- as.data.table(dat)
the.sides <- strsplit(x = the.initial.formula, split = "~")[[1]]
the.pieces.untrimmed <- strsplit(x = the.sides[2], split = "+", fixed = TRUE)[[1]]
the.pieces <- trimws(x = the.pieces.untrimmed, which = "both")
num.variables <- length(the.pieces)
include.pieces <- logical(num.variables)
for (i in 1:num.variables) {
unique.values <- dat[, unique(get(the.pieces[i]))]
if (length(unique.values) < 2) {
include.pieces[i] <- FALSE
} else {
include.pieces[i] <- TRUE
}
}
rhs <- paste(the.pieces[include.pieces == TRUE], collapse = " + ")
the.formula <- sprintf("%s ~ %s", trimws(x = the.sides[1]), rhs)
return(the.formula)
}
linear.regression.summary <- function(lm.mod, digits = 3) {
lm.coefs <- as.data.table(summary(lm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1 - alpha/2, mean = 0, sd = 1)
lm.coefs[, `:=`(Coef.Lower.95, Estimate - z * `Std. Error`)]
lm.coefs[, `:=`(Coef.Upper.95, Estimate + z * `Std. Error`)]
return(lm.coefs)
}
logistic.regression.summary <- function(glm.mod, digits = 3) {
glm.coefs <- as.data.table(summary(glm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1 - alpha/2, mean = 0, sd = 1)
glm.coefs[, `:=`(Odds.Ratio, exp(Estimate))]
glm.coefs[, `:=`(OR.Lower.95, exp(Estimate - z * `Std. Error`))]
glm.coefs[, `:=`(OR.Upper.95, exp(Estimate + z * `Std. Error`))]
return(glm.coefs[])
}
fit.model <- function(dat, the.initial.formula, model.type, digits = 3) {
the.formula <- reduce.formula(dat = dat, the.initial.formula = the.initial.formula)
if (model.type == "logistic") {
mod <- glm(formula = the.formula, family = "binomial", data = dat)
mod.summary <- logistic.regression.summary(glm.mod = mod, digits = digits)
}
if (model.type == "linear") {
mod <- lm(formula = the.formula, data = dat)
mod.summary <- linear.regression.summary(lm.mod = mod, digits = digits)
}
mod.summary.rounded <- mod.summary[, lapply(X = .SD, FUN = "round.numerics", digits = digits)]
return(mod.summary.rounded)
}
awareness.model <- function(dat) {
the.initial.formula <- sprintf("Awareness ~ age.group + gender + income.group + region + persona + agg.engagement + %s", paste(bp.traits, collapse = " + "))
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula, model.type = "logistic")
return(res)
}
consideration.model <- function(dat) {
the.initial.formula <- sprintf("Consideration ~ age.group + gender + income.group + region + persona + agg.engagement + %s", paste(bp.traits, collapse = " + "))
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula, model.type = "logistic")
return(res)
}
#
consumption.model <- function(dat) {
the.initial.formula <- sprintf("Consumption ~ age.group + gender + income.group + region + persona + agg.engagement + %s", paste(bp.traits, collapse = " + "))
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula, model.type = "logistic")
return(res)
}
#
advocacy.model <- function(dat) {
the.initial.formula <- sprintf("Advocacy ~ age.group + gender + income.group + region + persona + agg.engagement + %s", paste(bp.traits, collapse = " + "))
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula,model.type = "logistic")
return(res)
}
#
satisfaction.model <- function(dat) {
the.initial.formula <- sprintf("Satisfaction ~ age.group + gender + income.group + region + persona + agg.engagement + %s", paste(bp.traits, collapse = " + "))
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula, model.type = "linear")
return(res)
}
renderDataTable({
em.subdat <- dat[Product %in% input$em_product & age.group %in% input$em_age & gender %in% input$em_gender & income.group %in% input$em_income & region %in% input$em_region & persona %in% input$em_persona & bp.traits %in% input$em_bp]
if (input$agg.eng == TRUE){
aggregated.engagement.dat <- dat[Product != input$em_product]
aggregated.engagement <- aggregated.engagement.dat[, lapply(.SD, FUN = "mean", na.rm = TRUE), .SDcols = input$em_state, keyby = id]
em.subdat$agg.engagement <- aggregated.engagement[, input$em_state]
if(input$em_state == "Awareness"){
res <- awareness.model(dat = em.subdat)
}
if(input$em_state == "Consideration"){
res <- consideration.model(dat = em.subdat)
}
if(input$em_state == "Consumption"){
res <- consumption.model(dat = em.subdat)
}
if(input$em_state == "Advocacy"){
res <- advocacy.model(dat = em.subdat)
}
if(input$em_state == "Satisfaction"){
res <- satisfaction.model(dat = em.subdat)
}
datatable(data = res)
} else{
em.subdat$agg.engagement <- NULL
if(input$em_state == "Awareness"){
res <- awareness.model(dat = em.subdat)
}
if(input$em_state == "Consideration"){
res <- consideration.model(dat = em.subdat)
}
if(input$em_state == "Consumption"){
res <- consumption.model(dat = em.subdat)
}
if(input$em_state == "Advocacy"){
res <- advocacy.model(dat = em.subdat)
}
if(input$em_state == "Satisfaction"){
res <- satisfaction.model(dat = em.subdat)
}
datatable(data = res)
}
})
em.subdat.1 <- dat[Product == input$product]
temp.subdat <- dat[Product != input$product]
#agg.eng <- temp.subdat[, lapply(.SD, FUN = "mean", na.rm = TRUE), .SDcols = input$em_state, keyby = id]
agg.eng <- temp.subdat[, .('mean' = mean(get(input$state), na.rm = TRUE)), by = id]
em.subdat.1$aggregated.engagement <- agg.eng[, mean]
#agg.eng <- aggregate(Awareness~id, FUN = "mean", data = temp.subdat)
#em.subdat$aggregated.engagement<-runif(length(em.subdat$id), min=0, max=1)
formula.variables <- c(input$em_variables, input$bp_variables)
the.formula <- paste(input$state, "~", paste(formula.variables, collapse = "+"))
res <- fit.model.1(em.subdat.1, the.initial.formula = the.formula)
res
the.formula
em.subdat
em.subdat.1
the.initial.formula = the.formula
the.initial.formula
the.formula <- reduce.formula(dat = dat, the.initial.formula = the.initial.formula)
dat = em.subdat.1
the.formula <- reduce.formula(dat = dat, the.initial.formula = the.initial.formula)
the.formula
dat <- as.data.table(dat)
the.sides <- strsplit(x = the.initial.formula, split = "~")[[1]]
the.pieces.untrimmed <- strsplit(x = the.sides[2], split = "+", fixed = TRUE)[[1]]
the.pieces <- trimws(x = the.pieces.untrimmed, which = "both")
num.variables <- length(the.pieces)
include.pieces <- logical(num.variables)
for (i in 1:num.variables) {
unique.values <- dat[, unique(get(the.pieces[i]))]
if (length(unique.values) < 2) {
include.pieces[i] <- FALSE
} else {
include.pieces[i] <- TRUE
}
}
rhs <- paste(the.pieces[include.pieces == TRUE], collapse = " + ")
rhs
include.pieces
i = num.variables
unique.values <- dat[, unique(get(the.pieces[i]))]
unique.values
the.initial.formula
dat <- as.data.table(dat)
the.sides <- strsplit(x = the.initial.formula, split = "~")[[1]]
the.pieces.untrimmed <- strsplit(x = the.sides[2], split = "+", fixed = TRUE)[[1]]
the.pieces <- trimws(x = the.pieces.untrimmed, which = "both")
num.variables <- length(the.pieces)
include.pieces <- logical(num.variables)
dat <- as.data.table(dat)
the.sides <- strsplit(x = the.initial.formula, split = "~")[[1]]
the.pieces.untrimmed <- strsplit(x = the.sides[2], split = "+", fixed = TRUE)[[1]]
the.pieces <- trimws(x = the.pieces.untrimmed, which = "both")
num.variables <- length(the.pieces)
include.pieces <- logical(num.variables)
for (i in 1:num.variables) {
unique.values <- dat[, unique(get(the.pieces[i]))]
if (length(unique.values) < 2) {
include.pieces[i] <- FALSE
} else {
include.pieces[i] <- TRUE
}
}
rhs <- paste(the.pieces[include.pieces == TRUE], collapse = " + ")
the.formula <- sprintf("%s ~ %s", trimws(x = the.sides[1]), rhs)
the.formula
library(knitr)
opts_chunk$set(echo = TRUE, eval = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55), tidy = TRUE)
library(data.table)
dat <- fread(input = "../Data/Homework 4 Data -- 2017.csv", verbose = FALSE)
num.lines <- 20
question.counter = 0
library(DT)
sampled.rows <- sample(x = 1:dat[, .N], size = num.lines, replace = FALSE)
datatable(data = dat[sampled.rows,], rownames = FALSE)
question.counter <- question.counter + 1
percentage.table <- function(x, digits = 1){
tab <- table(x)
percentage.tab <- 100*tab/(sum(tab))
rounded.tab <- round(x = percentage.tab, digits = digits)
return(rounded.tab)
}
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
library(Hmisc)
dat[, age.group := cut2(x = age, cuts = c(18, 35, 50, 65, 120))]
age.tab <- percentage.table(x = dat[, age.group])
age.tab <- data.table(age.tab)
colnames(age.tab) <- c("age_group", "percentage")
age.tab$percentage <- sprintf("%0.1f%%", age.tab$percentage)
age.tab
gender.tab <- percentage.table(x = dat[, gender])
gender.tab <- data.table(gender.tab)
colnames(gender.tab) <- c("gender_group", "percentage")
gender.tab$percentage <- sprintf("%0.1f%%", gender.tab$percentage)
gender.tab
dat[, income.group := cut2(x = income, cuts = 1000* c(0, 50, 75, 100, 150, 250))]
income.tab <- percentage.table(x = dat[, income.group])
income.tab <- data.table(income.tab)
colnames(income.tab) <- c("income_group", "percentage")
income.tab$percentage <- sprintf("%0.1f%%", income.tab$percentage)
income.tab
region.tab <- percentage.table(x = dat[, region])
region.tab <- data.table(region.tab)
colnames(region.tab) <- c("region_group", "percentage")
region.tab$percentage <- sprintf("%0.1f%%", region.tab$percentage)
region.tab
persona.tab <- percentage.table(x = dat[, persona])
persona.tab <- data.table(persona.tab)
colnames(persona.tab) <- c("persona_group", "percentage")
persona.tab$percentage <- sprintf("%0.1f%%", persona.tab$percentage)
persona.tab
print("Please see the reporting engine for this solution.")
question.counter <- question.counter + 1
northeast.dat <- dat[region == "Northeast"]
awareness.rate <- northeast.dat[, .(awareness = mean(x = Awareness, na.rm = TRUE)), by = "Product"]
awareness.rate$awareness <- sprintf("%.1f%%", 100*awareness.rate$awareness)
setorderv(x = awareness.rate, cols = "awareness", order = -1)
awareness.rate[1:5,]
rich.female.dat <- dat[gender == "Female" & income >= 100000]
advocacy.rate <- rich.female.dat[, .(advocacy = mean(x = Advocacy, na.rm = TRUE)), by = "Product"]
advocacy.rate$advocacy <- sprintf("%.1f%%", 100 * advocacy.rate$advocacy)
setorderv(x = advocacy.rate, cols = "advocacy", order = -1)
advocacy.rate[1:5]
print("Please see the reporting engine for this solution.")
question.counter <- question.counter + 1
bp.traits <- names(dat)[grep(pattern = "BP_", x = names(dat))]
avg <- dat[, lapply(X = .SD, FUN = "mean", na.rm = TRUE), .SDcols = bp.traits, by = Product]
# invert the negative perceptions
invert.score <- avg[, lapply(X = .SD, function(x) 10 - x), .SDcols = tail(bp.traits, 4)]
# replace the old values with inverted score
avg[, tail(bp.traits, 4)] <- invert.score
overall.avg.perception <- avg[, .(Overall_Perception = rowSums(.SD, na.rm = TRUE)/length(bp.traits)), by = "Product"]
overall.avg.perception$Overall_Perception <- round(overall.avg.perception$Overall_Perception, 1)
setorderv(x = overall.avg.perception, cols = "Overall_Perception", order = -1)
overall.avg.perception[1:5, ]
print("Please see the reporting engine for this solution.")
question.counter <- question.counter + 1
consumption.rate <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = "Consumption", keyby = Product]
awareness.rate <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = "Awareness", keyby = Product]
merge.table <- merge(consumption.rate, awareness.rate, all = TRUE)
merge.table[, `:=`(difference, Consumption - Awareness)]
setorderv(x = merge.table, cols = "difference", order = -1)
top.five.gap <- merge.table[1:5]
library(ggplot2)
top.five.gap$Product <- factor(top.five.gap$Product, levels = top.five.gap$Product[order(top.five.gap$difference, decreasing = TRUE)])
ggplot(top.five.gap, aes(x = Product, y = difference)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", difference * 100)),
vjust = -.5)
satisfaction.rate <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = "Satisfaction", keyby = Product]
satisfaction.rate$Satisfaction <- satisfaction.rate$Satisfaction/10
awareness.rate <- dat[, lapply(x = .SD, FUN = "mean", na.rm = TRUE), .SDcols = "Awareness", keyby = Product]
merge.table.b <- merge(satisfaction.rate, awareness.rate, all = TRUE)
merge.table.b[, `:=`(difference, Awareness - Satisfaction)]
setorderv(x = merge.table.b, cols = "difference", order = -1)
top.five.gap.b <- merge.table.b[1:5]
library(ggplot2)
top.five.gap.b$Product <- factor(top.five.gap.b$Product, levels = top.five.gap.b$Product[order(top.five.gap.b$difference, decreasing = TRUE)])
ggplot(top.five.gap.b, aes(x = Product, y = difference)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", difference * 100)),
vjust = -.5)
print("Please see the reporting engine for this solution.")
question.counter <- question.counter + 1
library(data.table)
reduce.formula <- function(dat, the.initial.formula) {
dat <- as.data.table(dat)
the.sides <- strsplit(x = the.initial.formula, split = "~")[[1]]
the.pieces.untrimmed <- strsplit(x = the.sides[2], split = "+", fixed = TRUE)[[1]]
the.pieces <- trimws(x = the.pieces.untrimmed, which = "both")
num.variables <- length(the.pieces)
include.pieces <- logical(num.variables)
for (i in 1:num.variables) {
unique.values <- dat[, unique(get(the.pieces[i]))]
if (length(unique.values) < 2) {
include.pieces[i] <- FALSE
} else {
include.pieces[i] <- TRUE
}
}
rhs <- paste(the.pieces[include.pieces == TRUE], collapse = " + ")
the.formula <- sprintf("%s ~ %s", trimws(x = the.sides[1]), rhs)
return(the.formula)
}
logistic.regression.summary <- function(glm.mod, digits = 3) {
glm.coefs <- as.data.table(summary(glm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1 - alpha/2, mean = 0, sd = 1)
glm.coefs[, `:=`(Odds.Ratio, exp(Estimate))]
glm.coefs[, `:=`(OR.Lower.95, exp(Estimate - z * `Std. Error`))]
glm.coefs[, `:=`(OR.Upper.95, exp(Estimate + z * `Std. Error`))]
return(glm.coefs[])
}
linear.regression.summary <- function(lm.mod, digits = 3) {
lm.coefs <- as.data.table(summary(lm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1 - alpha/2, mean = 0, sd = 1)
lm.coefs[, `:=`(Coef.Lower.95, Estimate - z * `Std. Error`)]
lm.coefs[, `:=`(Coef.Upper.95, Estimate + z * `Std. Error`)]
return(lm.coefs)
}
fit.model <- function(dat, the.initial.formula, model.type, digits = 3) {
the.formula <- reduce.formula(dat = dat, the.initial.formula = the.initial.formula)
if (model.type == "logistic") {
mod <- glm(formula = the.formula, family = "binomial", data = dat)
mod.summary <- logistic.regression.summary(glm.mod = mod, digits = digits)
}
if (model.type == "linear") {
mod <- lm(formula = the.formula, data = dat)
mod.summary <- linear.regression.summary(lm.mod = mod, digits = digits)
}
mod.summary.rounded <- mod.summary[, lapply(X = .SD, FUN = "round.numerics", digits = digits)]
return(mod.summary.rounded)
}
exclude.buzzdial <- dat[Product != "Buzzdial"]
buzzdial.dat <- dat[Product == "Buzzdial"]
buzzdial.awareness <- exclude.buzzdial[, lapply(.SD, FUN = "mean", na.rm = TRUE), .SDcols = "Awareness", keyby = id]
# temp <- exclude.buzzdial[, .('mean' = mean(Awareness)), by = id]
#agg.eng <- aggregate(Awareness~id, FUN = "mean", data = exclude.buzzdial)
buzzdial.dat[, b.awareness := buzzdial.awareness$Awareness]
# aggregated.awareness <- dat[, lapply(.SD, FUN = "mean", na.rm = TRUE), .SDcols = "Awareness", keyby = id]
# dat[, b.awareness := aggregated.awareness$Awareness]
awareness.model <- function(dat){
the.initial.formula <- "Awareness ~ age.group + gender + income.group  + region + persona + b.awareness"
res <- fit.model(dat = buzzdial.dat, the.initial.formula = the.initial.formula, model.type = "logistic")
return(res)
}
#awareness.model(dat)
#datatable(data = buzzdial.aggregate.awareness)
#awareness.model(dat[Product != "Buzzdial"])
awareness.model(dat)
buzzdial.satisfaction <- exclude.buzzdial[, lapply(.SD, FUN = "mean", na.rm = TRUE), .SDcols = "Satisfaction", keyby = id]
buzzdial.dat$b.satisfaction <- buzzdial.satisfaction$Satisfaction
#satisfaction.formula <- "Satisfaction ~ age.group + gender + income.group  + region + persona + b.satisfaction"
#buzzdial.aggregate.satisfaction <- fit.model(dat = exclude.buzzdial, the.initial.formula = satisfaction.formula, model.type = "linear")
satisfaction.model <- function(dat){
the.initial.formula <- " Satisfaction ~ age.group + gender + income.group  + region + persona + b.satisfaction"
res <- fit.model(dat = dat, the.initial.formula = the.initial.formula, model.type = "linear")
return(res)
}
#datatable(data = buzzdial.aggregate.satisfaction)
satisfaction.model(buzzdial.dat)
print("Please see the reporting engine for this solution.")
